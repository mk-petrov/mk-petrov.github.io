{"version":3,"sources":["components/Tag.js","components/Photo.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["style","backgroundColor","border","borderRadius","margin","padding","content","Tag","props","react_default","a","createElement","_content","Photo","className","src","url","alt","href","individualPhoto","target","title","ownersProfile","owner","description","tags","slice","map","tag","components_Tag","key","id","Form","onSubmit","searchPhoto","marginBottom","type","name","App","state","photos","API_KEY","e","preventDefault","search","elements","value","_this","getPhotos","getPhotoInfo","fullPhotoInfo","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","photo","api_call","data","wrap","_context","prev","next","fetch","concat","secret","sent","json","username","push","stop","this","_x","apply","arguments","setTimeout","setState","_callee2","photoArray","_args2","_context2","length","undefined","farm","server","components_Form","components_Photo","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.684b1f87.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst style = {\r\n  backgroundColor: '#eee',\r\n  border: '1px solid #a09f9f',\r\n  borderRadius: '2px',\r\n  margin: '2px',\r\n  padding: '1px 3px',\r\n  content: 'justify'\r\n}\r\n\r\nconst Tag = props => <span style={style}> {props.content._content} </span>\r\n\r\nexport default Tag\r\n","import React from 'react'\r\nimport Tag from './Tag'\r\n\r\nconst Photo = props => (\r\n  <div className='photo__box'>\r\n    <img className='photo__box-img' src={props.url} alt='props.title' />\r\n    <div className='photo__text'>\r\n      <div>\r\n        <a href={props.individualPhoto} target='blank'><span className='photo__title'>{props.title}</span></a> by\r\n        <a href={props.ownersProfile} target='blank'><span className='photo__owner'> {props.owner || 'Author'}</span></a>\r\n      </div>\r\n      <p className='photo__description'>\r\n        <span className='photo__description-headline'>Description:</span> {props.description || 'No description available'}\r\n      </p>\r\n      <p className='photo__tags'>\r\n        <span className='photo__tags-headline'>Tags:</span>\r\n        {\r\n          props.tags.slice(0, 5).map(tag => <Tag key={tag.id} content={tag} />)\r\n        }\r\n      </p>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Photo\r\n","import React from 'react'\n\nconst Form = props => (\n  <form onSubmit={props.searchPhoto} style={{ marginBottom: '2rem' }}>\n    <input className='form__input' type='text' name='searchPhoto' />\n    <button className='form__button'>Search</button>\n  </form>\n)\n\nexport default Form\n","import React, { Component } from 'react'\nimport Photo from './components/Photo'\nimport Form from './components/Form'\nimport './App.css'\n\nclass App extends Component {\n  state = {\n    photos: []\n  }\n\n  API_KEY = 'fabf79364870c33807753253935e0a0e'\n\n  componentWillMount () {\n    this.getPhotos()    \n  }\n\n  searchPhoto = (e) => {\n    e.preventDefault()\n    const search = e.target.elements.searchPhoto.value || 'nature'\n    this.getPhotos(search)\n  }  \n\n  getPhotoInfo = () => {\n    let fullPhotoInfo = []\n    this.state.photos.map(async (photo) => {\n      const api_call = await fetch(`https://api.flickr.com/services/rest/?method=flickr.photos.getInfo&api_key=${this.API_KEY}&photo_id=${photo.id}&secret=${photo.secret}&format=json&nojsoncallback=1`)\n      let data = await api_call.json()\n\n      photo.description = data.photo.description._content\n      photo.tags = data.photo.tags.tag\n      photo.owner = data.photo.owner.username\n      fullPhotoInfo.push(photo)\n\n    })\n\n    setTimeout(() => {\n      this.setState({photos: fullPhotoInfo})\n    }, 1000)\n  }\n  \n  getPhotos = async (search = 'nature') => {\n    const api_call = await fetch(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${this.API_KEY}&text=${search}&per_page=12&page=1&format=json&nojsoncallback=1`)\n    let data = await api_call.json()\n    \n    let photoArray = data.photos.photo.map((photo) => {      \n      return {\n        id: photo.id,\n        secret: photo.secret,\n        url: `https://farm${photo.farm}.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}_c.jpg`,\n        ownersProfile: `https://www.flickr.com/people/${photo.owner}/`,\n        title: photo.title,\n        individualPhoto: `https://www.flickr.com/photos/${photo.owner}/${photo.id}`,\n        description: '',\n        tags: [],\n        owner: ''\n      }      \n    })\n    \n    this.setState({photos: photoArray}, () => {\n      this.getPhotoInfo()\n    })\n  }\n\n  render () {\n    return (\n      <div className='App'>\n        <header className='App-header'>\n          <h1 className='App-title'>Flickr API Task</h1>\n          <Form searchPhoto={this.searchPhoto} />\n        </header>\n        <div className='container'>\n          <div className='row'>\n            {this.state.photos.map(photo => <div key={photo.id} className=\"col-md-4\" style={{ marginBottom:\"2rem\" }}><Photo {...photo} /></div>)}\n          </div>\n        </div>       \n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}